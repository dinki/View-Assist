blueprint:
  name: View Assist - Device Alerts 
  description: This blueprint allows the user to define an event that will add an icon, speak an announcement, and/or display a screen with status.  It will optionally do the same for an ending event (View Assist devicealert v 1.0.0) 
  domain: automation
  input:
    satellite:
      name: Satellite
      description: The View Assist group or individual device entities to display the icon on (example group.viewassist_satellites or sensor.viewassist_living_room)
      selector:
        entity:
          multiple: true
          filter:
            - domain: sensor
            - domain: group
    icon:
      name: Display Icon
      description: The icon name as defined in the dashboard to display (example washer) **Note that this MUST be defined in the dashboard to be usable**
      default: ""

    start_definitions:
      name: Start Alert Definitions
      description: These options are used for the variables needed for the start condition for the alert
      input:      
        start_sensor:
          name: Start Sensor
          description: The sensor to monitor for changes for starting the alert (example binary_sensor.washer_notification)
          default: ""
        start_sensor_to:
          name: Start Sensor TO condition
          description: The start monitored sensor value TO condition (example on)
          default: 
        start_sensor_from:
          name: Start Sensor FROM condition (optional)
          description: The monitored start sensor value FROM condition (example off)
          default: 
        start_icon:
          name: Start Icon
          description: The icon name as defined in the dashboard to display for start event (example washer) **Note that this MUST be defined in the dashboard to be usable**
          default: ""
        start_speech:
          name: Start Speech
          description: The text to speak for the start event (example Washer is done)
          default: ""
        start_alert:
          name: Start Alert
          description: The icon, text, and path to the view for the start event
          default: ""
          selector:
            object:
          default:
            alert_data:
              icon: mdi:shield-home
              header: "Alarm Status"
              line1: "Armed Home"
              line2: ""
        start_view:
          name: Start View
          description: The view to display when the start event happens (default viewassist/alert)
          default: "viewassist/alert"                                                    
    end_definitions:
      name: End Alert Definitions
      description: These options are used for the variables needed for the end condition for the alert (Optional)
      input:                        
        end_sensor:
          name: End Sensor
          description: The sensor to monitor for changes for ending the alert (example binary_sensor.washer_notification)
          default:       
        end_sensor_to:
          name: End Sensor TO condition
          description: The monitored end sensor value TO condition (example on)
          default: 
        end_sensor_from:
          name: End Sensor FROM condition (optional)
          description: The monitored end sensor value FROM condition (example off)
          default:
        end_icon:
          name: End Icon
          description: The icon name as defined in the dashboard to display for end event (example washer) **Note that this MUST be defined in the dashboard to be usable**
          default: ""
        end_speech:
          name: End Speech
          description: The text to speak for the end event (example Washer is done)
          default: ""
        end_alert:
          name: End Alert
          description: The icon, text, and path to the view for the start event
          default: ""
          selector:
            object:
          default:
            alert_data:
              icon: mdi:home-circle
              header: "Alarm Status"
              line1: "Armed Disarmed"
              line2: ""
        end_view:
          name: End View
          description: The view to display when the end event happens (default viewassist/alert)
          default: "viewassist/alert"                                                    
              
triggers:
  - trigger: state
    entity_id: 
    - !input start_sensor
    from: !input start_sensor_from
    to: !input start_sensor_to
    id: startaction
  - trigger: state
    entity_id: 
    - !input end_sensor
    from: "on"
    to: "off"
    id: endaction
conditions: []
actions:
  - variables:
      icon: !input icon
      satellite: !input satellite
      expanded_satellites: >
        {% set input_satellites = expand(states|selectattr('entity_id', 'in', satellite)) %}
        {{ input_satellites | map(attribute='entity_id') | list }}
      start_icon: !input start_icon
      start_speech: !input start_speech
      start_alert: !input start_alert
      start_view: !input start_view
      end_icon: !input end_icon
      end_speech: !input end_speech
      end_alert: !input end_alert
      end_view: !input end_view      

  - choose:
      - conditions:
          - condition: trigger
            id: startaction
        sequence:
          - repeat:
              for_each: "{{ expanded_satellites }}"
              sequence:
                - variables:
                    current_satellite: "{{ repeat.item }}"
                    icon_list: >
                      {% set old_list = state_attr(current_satellite, 'status_icons') or [] %}
                      {% set new_list = [start_icon] + old_list | unique | list %}
                      {{ new_list }}
                - service: python_script.set_state
                  data:
                    entity_id: "{{ current_satellite }}"
                    status_icons: "{{ icon_list }}"
                - service: python_script.set_state
                  data:
                    entity_id: "{{ current_satellite }}"
                    "{{ start_alert }}"                  
                - service: browser_mod.navigate
                  data:
                    path: "{{ start_view }}"
                  target:
                    device_id: "{{ device_id(state_attr(current_satellite, 'display_device')) }}"                    
      - conditions:
          - condition: trigger
            id: endaction
        sequence:
          - repeat:
              for_each: "{{ expanded_satellites }}"
              sequence:
                - variables:
                    current_satellite: "{{ repeat.item }}"
                    icon_list: >
                      {% set old_list = state_attr(current_satellite, 'status_icons') or [] %}
                      {% set new_list = old_list | reject('eq', start_icon) | list %}
                      {{ new_list }}
                - service: python_script.set_state
                  data:
                    entity_id: "{{ current_satellite }}"
                    status_icons: "{{ icon_list }}"
                    