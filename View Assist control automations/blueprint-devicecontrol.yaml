blueprint:
  name: View Assist - Control display template
  description: This is used as a base for setting up display control on a View Assist Satellite (View Assist control v 1.2.0)
  domain: automation
  input:
    satellite:
      name: Satellite
      description: The View Assist device entity to control (example sensor.viewassist_living_room)
      selector:
        entity:
          filter:
            - domain: sensor      
    display:
      name: Display Device
      description: The browsermod display device used by View Assist (example sensor.browsermod_livingroom_browser_path)
      selector:
        entity:
          filter:
            - domain: sensor       
    timer:
      name: Timer
      description: The associated timer device entity for the satellite (example timer.viewassist_living_room)
      selector:
        entity:
          filter:
            - domain: timer
    intent:
      name: Intent
      description: The above View Assist device entity intent sensor (example sensor.viewassist_living_room_intent)
      selector:
        entity:
          filter:
            - domain: sensor            
    dashboard:
      name: Dashboard
      description: The base dashboard for View Assist (do not include trailing slash)
      default: "/dashboard-viewassist"
    home:
      name: Default Home screen
      description: The screen to return to after timeout
      default: "/dashboard-viewassist/clock"
    music:
      name: Default Music View screen
      description: The view to return to when in music mode
      default: "/dashboard-viewassist/music"
    intent_view:
      name: Intent View screen
      description: The view to display for default HA actions for displaying those entities
      default: "/dashboard-viewassist/intent"
    micunmute:
      name: Unmute Mic
      description: Unmute microphone on HA start/restart.  Helpful for Stream Assist devices
      selector:
        boolean:
      default: true
    micdevice:
      name: Mic device
      description: The microphone entity to unmute on HA start/restart. (example switch.viewassist_living_room_mic)
      selector:
        entity:
          filter:
            - domain:
                - switch
          multiple: false      
trigger:
  - platform: state
    entity_id:
      - !input display
    id: ModeControl
  - platform: state
    entity_id:
      - !input satellite
    id: ModeControl
    attribute: mode
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer
    id: timerend
  - platform: state
    entity_id:
      - !input satellite
    id: Cycle
    attribute: mode
    to: cycle
  - platform: homeassistant
    event: start
    id: startup
  - platform: state
    entity_id:
      - !input intent
    id: intent    
variables:
  satellite: !input satellite
  dashboard: !input dashboard
  display: !input display
  home: !input home
  music: !input music
  micunmute: !input micunmute
  micdevice: !input micdevice
  intent: !input intent
  intent_view: !input intent_view

action:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - ModeControl
        sequence:
          - service: timer.start
            data:
              duration: >-
                {{states[satellite].attributes.view_timeout}}
            target:
              entity_id: !input timer
      - conditions:
          - condition: trigger
            id:
              - timerend
        sequence:
          - if:
              - condition: state
                entity_id: !input satellite
                state: normal
                attribute: mode
                enabled: true
            then:
              - service: browser_mod.navigate
                data:
                  path: "{{home}}"
                target:
                  device_id: "{{device_id(display)}}"
          - if:
              - condition: state
                entity_id: !input satellite
                state: music
                attribute: mode
                enabled: true
            then:
              - service: browser_mod.navigate
                data:
                  path: "{{ music }}"
                target:
                  device_id: "{{device_id(display)}}"
      - conditions:
          - condition: trigger
            id:
              - Cycle
        sequence:
          - repeat:
              while:
                - condition: state
                  entity_id: !input satellite
                  state: cycle
                  attribute: mode
              sequence:
                - repeat:
                    for_each: >-
                      {{ state_attr (satellite,'cycle_view')}}
                    sequence:
                      - if:
                          - condition: state
                            entity_id: !input satellite
                            state: cycle
                            attribute: mode
                        then:
                          - service: browser_mod.navigate
                            data:
                              path: "{{dashboard}}/{{repeat.item}}"
                            target:
                              device_id: "{{device_id(display)}}"
                      - if:
                          - condition: state
                            entity_id: !input satellite
                            state: cycle
                            attribute: mode
                        then:
                          - wait_for_trigger:
                              platform: event
                              event_type: timer.finished
                              event_data:
                                entity_id: !input timer
      - conditions:
          - condition: trigger
            id:
              - startup
        sequence:
          - if:
              - condition: template
                value_template: "{{ micunmute is true }}"
            then:        
              - service: switch.turn_on
                target:
                  entity_id: !input micdevice                              
      - conditions:
          - condition: trigger
            id:
              - intent
        sequence:
          - if:
              - condition: template
                value_template: >-
                  {{ state_attr(intent, 'intent_output')['response']['speech']['plain']['speech'] 
                  is not in "Sorry, I couldn't understand that"}}
            then:
              - service: python_script.set_state
                data:
                  entity_id: "{{ satellite }}"
                  last_said: >-
                    {{ state_attr(intent,
                    'intent_output')['response']['speech']['plain']['speech']}}
                enabled: true 
          - service: python_script.set_state
            data:
              title: ""
              entity_id: "{{ satellite }}"
              data:
                intent_entities: >-
                  {% set list =
                  state_attr(intent,'intent_output')['response']['data']['success']
                  | map(attribute='id') | list %}  {% set prefix = ('light',
                  'switch', 'cover', 'boolean') %}  {% set data =
                  namespace(filtered_list=[]) %}  {% for item in list %}
                      {%- if item.startswith(prefix) %} 
                          {% set data.filtered_list = data.filtered_list + [item] %}
                      {% endif -%}
                  {% endfor %}  {% set list = data.filtered_list %} [ {% for e
                  in list %}  {{ {'entity': e, 'tap_action':{'action':'toggle'},
                  'double_tap_action':{'action':'more-info'}} }} , {% endfor %}
                  ]
            enabled: true
          - if:
              - condition: template
                value_template: >-
                  {% if 'id' in
                  state_attr(intent,
                  'intent_output')['response']['data']['success'][0] %} true {%
                  else %} false {% endif %}
            then:
              - service: browser_mod.navigate
                data:
                  path: "{{ intent_view }}"
                target:
                  device_id: "{{device_id(display)}}"
mode: parallel
