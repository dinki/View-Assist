button_card_templates:
  variable_template:
    variables:
      dashboardversion: 1.2.0
      default_satellite: |-
        [[[ try {
          return hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.type === "view_audio");
          } catch { return  ""}
        ]]]
      var_assistsat_entity: |-
        [[[
          return localStorage.getItem("view_assist_sensor")
        ]]]
      var_mic_switch: |-
        [[[
          try
          {
            var micdevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var micdevice = hass.states[micdevice_assistbid].attributes.mute_switch;
            return `${micdevice}`;
          } catch { return  ""}
        ]]]
      var_wake_switch: |-
        [[[
          try {
            var micdevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var micdevice = hass.states[micdevice_assistbid].attributes.mic_device;
            if (micdevice.startsWith("assist_satellite.")) {
              var wakebutton = micdevice.replace("assist_satellite.", "button.") + "_wake";
              if (wakebutton in hass.states) {
                return `${wakebutton}`;
              }
            }
            return "";
          } catch {
            return "";
          }
        ]]]
      var_companion_orientation: |-
        [[[
          try {
            var browser_id = localStorage.getItem("view_assist_browser_id");
            if (!browser_id || !browser_id.startsWith("va-")) {
              return "";
            }
            
            var orientation_sensor = `sensor.${browser_id.replace(/[^a-zA-Z0-9]/g, '_')}_orientation`;
            
            if (orientation_sensor in hass.states) {
              return hass.states[orientation_sensor].state;
            }
            
            return "";
          } catch {
            return "";
          }
        ]]]
      var_mediaplayer_device: |-
        [[[
          try {
            var mediadevice_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var mediadevice = hass.states[mediadevice_assistbid].attributes.mediaplayer_device;
            return `${mediadevice}`;
          } catch { return  "";}
        ]]]
      var_mediaplayer_mute: |-
        [[[
          try {
            var mediaplayer_assistbid = localStorage.getItem("view_assist_sensor") ?? variables.default_satellite;
            var mediadevice = hass.states[mediaplayer_assistbid].attributes.mediaplayer_device;
            var mediaplayerstate = hass.states[mediadevice].attributes.is_volume_muted;
            return `${mediaplayerstate}`;
          } catch { return  "";}
        ]]]
      var_assistsat_time_format: |-
        [[[
          if (variables.var_assistsat_entity_use_24_hour_time) {
            return '%H:%M';
          } else {
            return '%l:%M';
          }
        ]]]
      var_current_time: |-
        [[[
          return `<viewassist-clock server_time=true format='${variables.var_assistsat_time_format}'></viewassist-clock>`;
        ]]]
      var_date_short: |-
        [[[
          return `<viewassist-clock server_time=true format='%a, %b %e'></viewassist-clock>`;
        ]]]
      var_date_long: |-
        [[[
          return `<viewassist-clock server_time=true format='%A, %B %d, %Y'></viewassist-clock>`;
        ]]]
      var_assistsat_entity_font_style: |
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.font_style;
          } catch { return  "Roboto"}
        ]]]
      var_assistsat_entity_weather_entity: |
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.weather_entity;
          } catch { return  ""}
        ]]]
      var_assistsat_entity_responsive_status_icons_size: |
        [[[
          try {
            const baseSize = states[variables.var_assistsat_entity].attributes.status_icons_size || "6vw";

            if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
              return parseFloat(baseSize) * 1.55 + 'vw';
            }

            return baseSize;
          } catch {
            return window.viewAssistResponsive?.orientation === "portrait" ? "7.8vw" : "6vw";
          }
        ]]]
      var_assistsat_entity_use_24_hour_time: |
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.use_24_hour_time;
          } catch { return  false}
        ]]]
      var_title: |-
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.title;
          } catch { return  ""}
        ]]]
      var_message: |-
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.message;
          } catch { return  ""}
        ]]]
      var_image: |-
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.image;
          } catch { return  ""}
        ]]]
      var_font_size: |-
        [[[
          try
          {
            return states[variables.var_assistsat_entity].attributes.message_font_size;
          }
          catch { return  ""}
        ]]]
      var_responsive_font_scale: |-
        [[[
          try {
            const responsive = window.viewAssistResponsive;
            if (!responsive) return 1;

            if (responsive.orientation === "portrait") {
              if (responsive.is_small_screen) return 0.85;
              if (responsive.is_tablet) return 1.1;
              return 1.25;
            } else {
              if (responsive.is_small_screen) return 0.9;
              if (responsive.is_tablet) return 1.0;
              return 1.2;
            }
          } catch { return 1; }
        ]]]
      var_weather_temperature: |-
        [[[
          try
          {
            return (states[variables.var_assistsat_entity_weather_entity].attributes.temperature  + 'Â°');
          }
          catch { return  ""}
        ]]]
      var_weather_icon: |-
        [[[
          const weatherIconsDay  = {
            "clear-night": "mdi:weather-night",
            "cloudy": "mdi:weather-cloudy",
            "dust": "mdi:weather-dust",
            "fog": "mdi:weather-fog",
            "hail": "mdi:weather-hail",
            "hazy": "mdi:weather-hazy",
            "hurricane": "mdi:weather-hurricane",
            "lightning": "mdi:weather-lightning",
            "lightning-rainy": "mdi:weather-lightning-rainy",
            "partlycloudy": "mdi:weather-partly-cloudy",
            "partly-lightning": "mdi:weather-partly-lightning",
            "partly-rainy": "mdi:weather-partly-rainy",
            "partly-snowy": "mdi:weather-partly-snowy",
            "partly-snowy-rainy": "mdi:weather-partly-snowy-rainy",
            "pouring": "mdi:weather-pouring",
            "rainy": "mdi:weather-rainy",
            "snowy": "mdi:weather-snowy",
            "snowy-heavy": "mdi:weather-snowy-heavy",
            "snowy-rainy": "mdi:weather-snowy-rainy",
            "sunny": "mdi:weather-sunny",
            "tornado": "mdi:weather-tornado",
            "windy":  "mdi:weather-windy",
            "windy-variant": "mdi:weather-windy-variant",
          };
          const weatherIconsNight = {
            ...weatherIconsDay,
            clear: "mdi:weather-night",
            sunny: "mdi:weather-night",
            partlycloudy: "mdi:weather-night-partly-cloudy",
          };
          try
          {
            var condition = states[variables.var_assistsat_entity_weather_entity].state;
            if (states['sun.sun'] === 'above_horizon') {
              var weather_icon = weatherIconsDay[condition];
            } else {
              var weather_icon = weatherIconsDay[condition];
            }

            if (typeof(weather_icon) === 'undefined') {
              var weather_icon = "mdi:help"
            }
            return `${weather_icon}`;
          } catch { return  ""}
        ]]]
      var_current_view: |-
        [[[
          try {
            const pathname = window.location.pathname;
            if (pathname) {
              const match = pathname.match(/\/view-assist\/([^\/]+)/);
              if (match && match[1]) {
                return match[1];
              }
            }

            const currentPath = hass.states[variables.var_assistsat_entity].attributes.current_path;
            if (currentPath) {
              const match = currentPath.match(/\/view-assist\/([^\/]+)/);
              if (match && match[1]) {
                return match[1];
              }
            }
            return "";
          } catch { return ""; }
        ]]]
  responsive_base:
    variables:
      var_orientation: |-
        [[[
          if (!window.viewAssistResponsive) {
            const companionOrientation = variables.var_companion_orientation;
            const initialOrientation = companionOrientation || 
              (window.innerHeight > window.innerWidth ? "portrait" : "landscape");
            
            window.viewAssistResponsive = {
              orientation: initialOrientation,
              is_small_screen: window.innerWidth < 600,
              is_tablet: window.innerWidth >= 600 && window.innerWidth < 1024,
              companion_available: !!companionOrientation
            };

            let resizeTimeout;
            window.addEventListener('resize', () => {
              clearTimeout(resizeTimeout);
              resizeTimeout = setTimeout(() => {
                const oldState = { ...window.viewAssistResponsive };

                const companionOrientationNow = variables.var_companion_orientation;
                const newOrientation = companionOrientationNow || 
                  (window.innerHeight > window.innerWidth ? "portrait" : "landscape");
                const newSmallScreen = window.innerWidth < 600;
                const newTablet = window.innerWidth >= 600 && window.innerWidth < 1024;

                if (oldState.orientation !== newOrientation ||
                    oldState.is_small_screen !== newSmallScreen ||
                    oldState.is_tablet !== newTablet) {

                  window.viewAssistResponsive.orientation = newOrientation;
                  window.viewAssistResponsive.is_small_screen = newSmallScreen;
                  window.viewAssistResponsive.is_tablet = newTablet;
                  window.viewAssistResponsive.companion_available = !!companionOrientationNow;

                  const event = new CustomEvent('view-assist-responsive-change', {
                    detail: window.viewAssistResponsive
                  });
                  window.dispatchEvent(event);
                }
              }, 150);
            });
          }

          const companionOrientation = variables.var_companion_orientation;
          if (companionOrientation && 
              window.viewAssistResponsive.orientation !== companionOrientation) {
            window.viewAssistResponsive.orientation = companionOrientation;
            window.viewAssistResponsive.companion_available = true;
            
            const event = new CustomEvent('view-assist-responsive-change', {
              detail: window.viewAssistResponsive
            });
            window.dispatchEvent(event);
          }

          return window.viewAssistResponsive.orientation;
        ]]]
  body_template_base:
    show_state: false
    show_icon: false
    show_name: false
    triggers_update: all
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  ""
          }]]]
        mode: hold
    double_tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        entity_id: >-
          [[[ try { return variables.var_assistsat_entity } catch { return  "" }
          ]]]
        mode: normal
    hold_action:
      action: call-service
      service: switch.toggle
      service_data:
        entity_id: '[[[ try { return variables.var_mic_switch } catch { return  "" } ]]]'
    styles:
      grid:
        - grid-template-areas: |
            "title status"
            "message message"
        - grid-template-rows: min-content 1fr
        - grid-template-columns: 1fr 1fr
        - row-gap: .5rem
      card:
        - background: |
            [[[
              if (variables.background != null) {
                return `center / cover no-repeat url(${variables.background})`
              } else if (variables.var_background != null) {
                  return `center / cover no-repeat url(${variables.var_background})`
              } else {
                return `center / cover no-repeat ${variables.background_color}`
              }
            ]]]
        - background-size: cover
        - overflow: hidden
        - color: white
        - font-family: |-
            [[[
              return `"${variables.var_assistsat_entity_font_style}", sans-serif`;
            ]]]
        - font-weight: 300
        - position: relative
        - height: 100vh
        - max-height: 100vh
        - box-sizing: border-box
      custom_fields:
        title:
          - position: absolute
          - justify-self: start
          - align-self: start
          - z-index: 5
          - font-size: |-
              [[[
                const baseSize = 200;
                const scale = parseFloat(variables.var_responsive_font_scale);
                return `${Math.round(baseSize * scale)}%`;
              ]]]
          - font-weight: 400
          - width: max-content
          - margin-left: 2%
          - margin-top: -4%
    custom_fields:
      title: '[[[ return variables.var_title ]]]'
      status:
        card:
          type: custom:layout-card
          layout_type: custom:horizontal-layout
          cards:
            - type: custom:layout-card
              layout_type: grid-layout
              layout:
                margin: 0
                card_margin: |-
                  [[[
                    return window.viewAssistResponsive?.orientation === "portrait" ? "0.5vh" : "0";
                  ]]]
                place-content: end
                grid-template-columns: |-
                  [[[
                    const baseIconSize = variables.var_assistsat_entity_responsive_status_icons_size;
                    return `repeat(auto-fit, minmax(${baseIconSize}, 1fr))`;
                  ]]]
              cards: |-
                [[[{
                  const buttonList = [];

                  try {
                    const vaEntity = variables.var_assistsat_entity;
                    if (!vaEntity || !hass.states[vaEntity]) {
                      return [];
                    }

                    const statusIcons = hass.states[vaEntity].attributes.status_icons || [];
                    const menuItems = hass.states[vaEntity].attributes.menu_items || [];
                    const menuActive = hass.states[vaEntity].attributes.menu_active || false;

                    const currentView = variables.var_current_view;

                    function isCurrentView(item) {
                      if (!currentView) return false;

                      if (typeof item === 'string' && !item.includes(':')) {
                        if (item === currentView) return true;

                        const templateViewMap = {
                          "home": "clock"
                        };
                        if (templateViewMap[item] === currentView) return true;
                        return false;
                      }

                      if (typeof item === 'string' && item.includes(':')) {
                        const parts = item.split('|');
                        const typeAndTarget = parts[0];
                        const [type, target] = typeAndTarget.split(':');

                        if (type === 'view') {
                          const viewName = target.includes('/') ?
                            target.split('/').pop() : target;
                          return viewName === currentView;
                        }
                      }

                      return false;
                    }

                    const addedItems = new Set();

                    function addIconToList(icon, isDynamicItem = false) {
                      if (icon === "menu") return;

                      if (menuActive && isCurrentView(icon)) {
                        return;
                      }

                      let buttonConfig;
                      if (isDynamicItem) {
                        const type = icon.split(':')[0];
                        buttonConfig = {
                          type: "custom:button-card",
                          template: `dynamic_${type}_item`,
                          variables: {
                            menu_item: icon,
                            entity_id: vaEntity
                          }
                        };
                      } else {
                        buttonConfig = {
                          type: "custom:button-card",
                          template: icon
                        };
                      }

                      const key = icon;
                      if (addedItems.has(key)) return;

                      addedItems.add(key);
                      buttonList.push(buttonConfig);
                    }

                    if (menuActive) {
                      const reversedMenuItems = [...menuItems].reverse();
                      reversedMenuItems.forEach(item => {
                        if (item !== "menu") {
                          if (item.includes(':')) {
                            addIconToList(item, true);
                          } else {
                            addIconToList(item, false);
                          }
                        }
                      });
                    }

                    statusIcons.forEach(icon => {
                      if (icon !== "menu") {
                        if (icon.includes(':')) {
                          addIconToList(icon, true);
                        } else {
                          addIconToList(icon, false);
                        }
                      }
                    });

                    if (hass.states[vaEntity].attributes.menu_config === "menu_enabled_button_visible" &&
                        !addedItems.has("menu")) {
                      buttonList.push({
                        type: "custom:button-card",
                        template: "menu"
                      });
                    }
                  } catch (error) {
                  }

                  return buttonList;
                }]]]
  body_template:
    template:
      - variable_template
      - body_template_base
    styles:
      card:
        - min-height: 100vh
        - max-height: 100vh
        - border-radius: 0px
        - overflow: hidden
        - aspect-ratio: |-
            [[[
              if (window.viewAssistResponsive && window.viewAssistResponsive.orientation === "portrait") {
                return window.viewAssistResponsive.is_small_screen ? "9 / 16" : "3 / 4";
              } else {
                return "16 / 9";
              }
            ]]]
      grid:
        - grid-template-rows: min-content 1fr
      custom_fields:
        status:
          - position: absolute
          - justify-self: end
          - align-self: end
          - justify-content: right
          - top: 1vh
          - right: 1vw
          - z-index: 1
  icon_template:
    template: variable_template
    color_type: card
    show_name: false
    size: 90%
    padding: 0px
    styles:
      card:
        - background-color: transparent
        - border-width: 0px
        - aspect-ratio: 1 / 1
      icon:
        - display: grid
        - color: white
  dynamic_view_item:
    template: icon_template
    icon: |-
      [[[
        const parts = variables.menu_item.split('|');
        const icon = parts.length > 1 ? parts[1] : 'view-dashboard';
        return `mdi:${icon}`;
      ]]]
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.entity_id; ]]]'
        path: |-
          [[[
            const parts = variables.menu_item.split('|');
            const typeAndTarget = parts[0];
            const target = typeAndTarget.split(':')[1];
            return target.startsWith('/') ? target : `/view-assist/${target}`;
          ]]]
  dynamic_entity_item:
    template: icon_template
    state_display: none
    entity: |-
      [[[
        const parts = variables.menu_item.split('|');
        const typeAndTarget = parts[0];
        return typeAndTarget.split(':')[1];
      ]]]
    icon: |-
      [[[
        const parts = variables.menu_item.split('|');
        const typeAndTarget = parts[0];
        const entityId = typeAndTarget.split(':')[1];
        const iconOptions = parts.length > 1 ? parts[1].split(',') : ['help-circle'];

        let icon = iconOptions[0];

        if (iconOptions.length > 1 && hass.states[entityId]) {
          const state = hass.states[entityId].state;

          if (state === 'off' && iconOptions[1]) {
            icon = iconOptions[1];
          }
        }

        return `mdi:${icon}`;
      ]]]
    tap_action:
      action: toggle
      entity: |-
        [[[
          const parts = variables.menu_item.split('|');
          const typeAndTarget = parts[0];
          return typeAndTarget.split(':')[1];
        ]]]
    hold_action:
      action: more-info
      entity: |-
        [[[
          const parts = variables.menu_item.split('|');
          const typeAndTarget = parts[0];
          return typeAndTarget.split(':')[1];
        ]]]
  dynamic_service_item:
    template: icon_template
    icon: |-
      [[[
        const parts = variables.menu_item.split('|');
        const icon = parts.length > 1 ? parts[1] : 'cog';
        return `mdi:${icon}`;
      ]]]
    tap_action:
      action: call-service
      service: |-
        [[[
          const parts = variables.menu_item.split('|');
          const typeAndTarget = parts[0];
          return typeAndTarget.split(':')[1];
        ]]]
      service_data: {}
  mediaplayer:
    type: custom:button-card
    template: icon_template
    icon: mdi:volume-off
    tap_action:
      action: call-service
      service: media_player.volume_mute
      service_data:
        entity_id: '[[[ return variables.var_mediaplayer_device ]]]'
        is_volume_muted: false
  mic:
    type: custom:button-card
    template: icon_template
    icon: mdi:microphone-off
    tap_action:
      action: call-service
      service: homeassistant.turn_off
      service_data:
        entity_id: '[[[ return variables.var_mic_switch ]]]'
  hold:
    type: custom:button-card
    template: icon_template
    icon: mdi:hand-back-left
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        mode: normal
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  cycle:
    type: custom:button-card
    template: icon_template
    icon: mdi:sync
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        mode: normal
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  dnd:
    type: custom:button-card
    template: icon_template
    icon: mdi:minus-circle
    tap_action:
      action: call-service
      service: view_assist.set_state
      service_data:
        do_not_disturb: false
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
  weather:
    type: custom:button-card
    template: icon_template
    icon: mdi:weather-sunny
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/weather
  home:
    type: custom:button-card
    template: icon_template
    icon: mdi:home
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/clock
  menu:
    type: custom:button-card
    template: icon_template
    icon: mdi:menu
    tap_action:
      action: call-service
      service: view_assist.toggle_menu
      service_data:
        entity_id: '[[[ return variables.var_assistsat_entity ]]]'
        show: >-
          [[[ return
          !states[variables.var_assistsat_entity].attributes.menu_active ]]]
  camera:
    type: custom:button-card
    template: icon_template
    icon: mdi:cctv
    tap_action:
      action: call-service
      service: view_assist.navigate
      service_data:
        device: '[[[ return variables.var_assistsat_entity ]]]'
        path: /view-assist/camera
  wake:
    type: custom:button-card
    template: icon_template
    icon: mdi:button-pointer
    tap_action:
      action: call-service
      service: button.press
      service_data:
        entity_id: "[[[ return variables.var_wake_switch ]]]"
views:
  - title: Home
