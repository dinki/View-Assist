type: custom:button-card
variables:
  assist_group: group.viewassist_satellites
  var_weather_entity: weather.home
  use_24_hour_time: false
  browser_mod_bid: "[[[ return localStorage.getItem(\"browser_mod-browser-id\") ]]]"
  default_satellite: |-
    [[[ try {
      return hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.type === "view_audio");
      } catch { return  ""}
    ]]]      
  var_current_time: |
    [[[
      try
      {
        if (variables.use_24_hour_time) {
          var options = { hour: "2-digit", minute: "2-digit", hour12: false };
        } else {
          var options = { hour: "numeric", minute: "2-digit" };      
        }
        
        let time = new Date().toLocaleTimeString([], options).replace("AM","").replace("PM","").replace("am","").replace("pm","");
        
        if(variables.use_24_hour_time) {
          time = time.replace("24:", "00:");
        }
        return time;
      } catch { return  ""}
    ]]]
  var_date_short: |
    [[[    
      const options = { weekday: "short", month: "short", day: "numeric", };
      try {return new Date().toLocaleDateString([], options);} catch { return  ""}  
    ]]]
  var_date_long: |
    [[[
          const options = { weekday: "long", month: "long", day: "numeric", year: 'numeric' };
          try {return new Date().toLocaleDateString([], options)} catch { return  ""}
    ]]]
  var_assistsat_entity: |-
    [[[
      try {
        return hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        } catch { return  ""}
      
    ]]]
  var_assisting: |-
    [[[
      try 
      {
        var assist_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var micdevice = hass.states[assist_assistbid].attributes.mic_device;
        var micstate = hass.states[micdevice].state;
        if (micdevice.includes("_stt")) 
        {
          var assisting = micstate.includes("start");
        }
        else
        {
          var assisting = !micstate.includes("wake_word");
        }
        return `${assisting}`;
      } catch { return  ""}
    ]]] 
  var_mic_device: |-
    [[[
      try
      {
        var micdevice_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var micdevice = hass.states[micdevice_assistbid].attributes.mic_device;
        if (micdevice.includes("_stt"))
          {
            var micdevice = micdevice.replace("sensor","switch").replace("stt","mic");      
          }
        return `${micdevice}`;
      } catch { return  ""}
    ]]]
  var_mic_mute: |-
    [[[
      try {
        var micmute_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var micdevice = hass.states[micmute_assistbid].attributes.mic_device;
        if (micdevice.includes("_stt"))
          {
            var micdevice = micdevice.replace("sensor","switch").replace("stt","mic");      
          }            
        var micstate = hass.states[micdevice].state;
        return `${micstate}`;
      } catch { return  "";}
    ]]]
  var_mic_switch: |-
    [[[
      try {
        var micswitch_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var micdevice = hass.states[micswitch_assistbid].attributes.mic_device;
        if (micdevice.includes("_stt"))
          {
            var micswitch = micdevice.replace("sensor","switch").replace("stt","mic");      
          }
        else
          {
            var micswitch = micdevice.replace("sensor","switch").replace("simple_state","microphone");      
          }
        return `${micswitch}`;
      } catch { return  "";}
    ]]]        
  var_musicplayer_device: |-
    [[[
      try {
        var musicdevice_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var musicdevice = hass.states[musicdevice_assistbid].attributes.musicplayer_device;
        return `${musicdevice}`;
      } catch { return  "";}
    ]]]   
  var_mediaplayer_device: |-
    [[[
      try {
        var mediadevice_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var mediadevice = hass.states[mediadevice_assistbid].attributes.mediaplayer_device;
        return `${mediadevice}`;
      } catch { return  "";}
    ]]]        
  var_mediaplayer_mute: |-
    [[[
      try {
        var mediaplayer_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var mediadevice = hass.states[mediaplayer_assistbid].attributes.mediaplayer_device;
        var mediaplayerstate = hass.states[mediadevice].attributes.is_volume_muted;
        return `${mediaplayerstate}`;
      } catch { return  "";}
    ]]]
  var_display_device: |-
    [[[
      try {
        var displaydevice_assistbid = hass.states[variables.assist_group].attributes.entity_id
         .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
        var displaydevice = hass.states[displaydevice_assistbid].attributes.display_device;
        return `${displaydevice}`;
      } catch { return  "";}
    ]]] 
  var_title: |-
    [[[ 
      try 
      {
        return states[variables.var_assistsat_entity].attributes.title;
      } catch { return  ""} 
    ]]]
  var_message: |-
    [[[ 
      try 
      {
        return states[variables.var_assistsat_entity].attributes.message;
      } catch { return  ""} 
    ]]]
  var_image: |-
    [[[ 
      try 
      {
        return states[variables.var_assistsat_entity].attributes.image;
      } catch { return  ""} 
    ]]]
  var_font_size: |-
    [[[ 
      try 
      {
        return states[variables.var_assistsat_entity].attributes.message_font_size;
      }
      catch { return  ""} 
    ]]]
  var_intent_entities: |-
    [[[  try { 
      return states[variables.var_assistsat_entity].attributes.data.intent_entities
    } catch { return "" } ]]]
template:
  - variable_template
  - body_template
styles:
  grid:
    - grid-template-areas: |
        "title status"  
        "message message"
        "assist assist"        
    - grid-template-rows: min-content max-content min-content
    - grid-template-columns: 1fr 1fr
  card:
    - background-color: "#059bf1"
    - border-width: 0px
    - border-radius: 0px
  custom_fields:
    message:
      - position: relative
      - height: 100vdh
      - text-align: start
      - text-wrap: wrap
      - justify-content: center
      - align-self: center
      - padding: "-10%"
custom_fields:
  title: Troubleshooting
  message: >-

    [[[

    return ` <br/><br/>entity: <br/><br/>assist_group:
    <b>${variables.assist_group}</b><br /> browsermod_bid:
    <b>${variables.browser_mod_bid}</b><br />     default_satellite:
    <b>${variables.default_satellite}</b><br /> var_assistsat_entity:
    <b>${variables.var_assistsat_entity}</b><br /> var_assisting:
    <b>${variables.var_assisting}</b><br/> var_mic_device:
    <b>${variables.var_mic_device}</b><br /> var_mic_mute:
    <b>${variables.var_mic_mute}</b><br /> var_mic_switch:
    <b>${variables.var_mic_switch}</b><br /> var_mediaplayer_device:
    <b>${variables.var_mediaplayer_device}</b><br /> var_mediaplayer_mute:
    <b>${variables.var_mediaplayer_mute}</b><br /> var_musicplayer_device:
    <b>${variables.var_musicplayer_device}</b><br/> var_display_device:
    <b>${variables.var_display_device}</b></br> var_title:
    <b>${variables.var_title}</b><br /> var_message:
    <b>${variables.var_message}</b><br /> var_image:
    <b>${variables.var_image}</b><br /> var_font_size:
    <b>${variables.var_font_size}</b><br/> var_intent_entities:
    <b>${variables.var_intent_entities}</b><br /> ` ]]]
