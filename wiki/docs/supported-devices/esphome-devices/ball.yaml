esphome:
  name: ball
  friendly_name: Ball
  min_version: 2025.6.0

esp32:
  board: esp32s3box
  flash_size: 16MB
  cpu_frequency: 240mhz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
external_components:
  - source:
      type: git
      url: https://github.com/kahrendt/esphome
      ref: i2s-duplex-dev-snapshot1
    components: [ i2s_audio, resampler, audio ]
    refresh: 10s
psram:
  mode: octal
  speed: 80MHz

# http_request:
#   useragent: "ESPHome"
#   timeout: 10s

http_request:
  buffer_size_rx: 1024

online_image:
  - url: "http://192.168.0.25:8123/local/rainy.png"
    format: png
    type: RGB565
    transparency: alpha_channel
    id: weather_img
    on_download_finished:
      - lvgl.image.update:
          id: weather_img_lvgl
          src: weather_img
      - lvgl.page.show:
          id: weather_page
      - delay: 20s
      - lvgl.page.show: idle_page
      - online_image.release: weather_img

api:
  actions:
    - action: show_intent
      variables:
        page: string
        icon: string
        name: string
        value: string
      then:
      - if:
          condition:
            lambda: 'return page == "weather";'
          then:
            - online_image.set_url:
                id: weather_img
                url: !lambda |-
                  return "http://192.168.0.25:8123/local/" + icon + ".png";
                # url: "http://192.168.0.25:8123/local/rainy.png"
            - script.execute: show_weather
      - if:
          condition:
            lambda: 'return page == "intent";'
          then:
            - lvgl.label.update:
                id: lbl_intent_icon
                text_font: roboto_icons_150
                text: !lambda |-
                  if (icon == "light") return "\U000F0335";
                  if (icon == "cover") return "\U000F01D8"; // Incorrect
                  if (icon == "group") return "\U000F0C87"; // Incorrect
                  if (icon == "fan") return "\U000F0210";
                  return icon; // Fallback to icon string if no match
                text_color: white
            - script.execute: show_intent

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "The Ball Hotspot"
    password: "ball1234"

captive_portal:
time:
  - platform: sntp
    id: time_comp
    servers:
     - ntp0.ntp-servers.net
     - ntp1.ntp-servers.net
     - ntp2.ntp-servers.net

interval:
  - interval: 1s
    then:
      - script.execute: time_update
button:
  - platform: restart
    id: reboot
    name: reboot
text:
  - platform: template
    name: "Notification Text"
    id: notification_text
    mode: text
    optimistic: true
    on_value:
      then:
        - media_player.speaker.play_on_device_media_file:
            media_file: timer_finished_sound
            announcement: true
        - lambda: |-
            if (!id(notification_text).state.empty() &&
                (id(previous_notification_text).empty() || id(notification_text).state != id(previous_notification_text))) {
              id(previous_notification_text) = id(notification_text).state;
              id(show_notification).execute();
            }
        - lvgl.label.update:
           id: lbl_note
           text: !lambda return x.c_str();
sensor:
  - platform: adc
    pin: GPIO1
    id: battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: "voltage"
    entity_category: "diagnostic"
    disabled_by_default: true
    update_interval: 30s
    attenuation: auto
    filters:
      - multiply: 2

  - platform: copy
    id: battery_percent
    source_id: battery_voltage
    name: "Battery level"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: "battery"
    entity_category: "diagnostic"
    filters:
      - lambda: return (x - 2.7) / (4.2 - 2.7) * 100;
      - clamp:
          min_value: 0
          max_value: 100
    on_value:
      - lvgl.label.update:
          id: lbl_battery_status
          text: !lambda |-
            static char buf[10];
            std::string icon;
            if (x == 100.0) {
                icon = "\U000F0079"; // mdi-battery (full)
            } else if (x > 90) {
                icon = "\U000F0082"; // mdi-battery-90
            } else if (x > 80) {
                icon = "\U000F0081"; // mdi-battery-80
            } else if (x > 70) {
                icon = "\U000F0080"; // mdi-battery-70
            } else if (x > 60) {
                icon = "\U000F007F"; // mdi-battery-60
            } else if (x > 50) {
                icon = "\U000F007E"; // mdi-battery-50
            } else if (x > 40) {
                icon = "\U000F007D"; // mdi-battery-40
            } else if (x > 30) {
                icon = "\U000F007C"; // mdi-battery-30
            } else if (x > 20) {
                icon = "\U000F007B"; // mdi-battery-20
            } else if (x > 10) {
                icon = "\U000F007A"; // mdi-battery-10
            } else if (x > 0) {
                icon = "\U000F008E"; // mdi-battery-outline
            } else {
                icon = "\U000F06A5"; // mdi-power-plug
            }
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;
  - platform: uptime
    id: up_sens
    on_value:
      - lambda: |-
          int seconds = id(up_sens).state;
          int days = seconds / 86400;
          int hours = seconds / 3600;
          int minutes = (seconds % 3600) / 60;
          seconds %= 60;
          id(up_sens_text).publish_state(str_sprintf("%03d:%02d:%02d:%02d", days, hours, minutes, seconds));
    update_interval: 30s

  - platform: wifi_signal
    name: "WiFi db"
    id: wifi_signal_db
    update_interval: 30s

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal"
    id: wifi_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

binary_sensor:
  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    id: left_button
    internal: true
    on_click:
      if:
        condition:
          switch.is_on: timer_ringing
        then:
          switch.turn_off: timer_ringing
        else:
          button.press: reboot
output:
  - platform: ledc
    pin: GPIO42
    id: backlight_output
    inverted: true

light:
  - platform: monochromatic
    id: led
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms

  - platform: esp32_rmt_led_strip
    id: led_ww
    name: Light
    disabled_by_default: false
    restore_mode: ALWAYS_OFF
    entity_category: config
    pin: GPIO48
    default_transition_length: 150ms
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 300ms
          update_interval: 350ms
          min_brightness: 20%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

touchscreen:
  platform: cst816
  id: screen_touch
  interrupt_pin: GPIO12
  reset_pin: GPIO6
  i2c_id: bus_b

i2c:
  - sda: GPIO15
    scl: GPIO14
    scan: false
    id: bus_a

  - sda: GPIO11
    scl: GPIO07
    scan: false
    id: bus_b

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin:
      number: GPIO45
      ignore_strapping_warning: true
    i2s_bclk_pin: GPIO9
    i2s_mclk_pin: GPIO16
    i2s_din_pin: GPIO10
    i2s_dout_pin: GPIO8
audio_dac:
  - platform: es8311
    i2c_id: bus_a
    id: es8311_dac
    bits_per_sample: 16bit
    sample_rate: 16000

microphone:
  - platform: i2s_audio
    id: ball_mic
    sample_rate: 16000
    bits_per_sample: 16bit
    adc_type: external
    channel: stereo

  - platform: resampler
    id: resampled_mic
    sample_rate: 16000
    microphone:
      microphone: ball_mic
      channels: [0,1]

speaker:
  - platform: i2s_audio
    id: ball_speaker
    dac_type: external
    sample_rate: 16000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms

  - platform: mixer
    id: mixing_speaker
    output_speaker: ball_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never

  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 16000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 16000
    bits_per_sample: 16

media_player:
  - platform: speaker
    id: external_media_player
    name: Media Player
    internal: False
    volume_increment: 0.05
    volume_min: 0.4
    volume_max: 1.0
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC
      num_channels: 1
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC
      num_channels: 2
      sample_rate: 48000
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 1.0s
    on_state:
      if:
        condition:
          and:
            - switch.is_off: timer_ringing
            - not:
                voice_assistant.is_running:
            - not:
                media_player.is_announcing:
        then:
          - mixer_speaker.apply_ducking:
              id: media_mixing_input
              decibel_reduction: 0
              duration: 1.0s
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_sound_file
        file: https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/sounds/wake.flac
micro_wake_word:
  id: mww
  microphone:
    microphone: resampled_mic
    channels: 1
    gain_factor: 4
  stop_after_detection: false
  models:
    - model: https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu_20241226.3/okay_nabu.json
      id: okay_nabu
    - model: hey_jarvis
      id: hey_jarvis
    - model: hey_mycroft
      id: hey_mycroft
    - model: https://github.com/kahrendt/microWakeWord/releases/download/stop/stop.json
      id: stop
      internal: true
  vad:
  on_wake_word_detected:
    - lambda: id(led).turn_on().set_brightness(1.0).perform();
    - lvgl.page.show: voice_page
    - if:
        condition:
          switch.is_on: timer_ringing
        then:
          - switch.turn_off: timer_ringing
        else:
          - if:
              condition:
                voice_assistant.is_running:
              then:
                voice_assistant.stop:
              else:
                - if:
                    condition:
                      media_player.is_announcing:
                    then:
                      - media_player.stop:
                          announcement: true
                    else:
                      - media_player.speaker.play_on_device_media_file:
                          media_file: wake_sound_file
                          announcement: true
                      - delay: 150ms
                      - voice_assistant.start:
                          wake_word: !lambda return wake_word;
voice_assistant:
  id: va
  microphone: resampled_mic
  media_player: external_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  use_wake_word: false
  on_stt_vad_end:
######### Dinki
# This is shown before the on_tts_end
    - lvgl.label.update:
        id: voice_label
        text_font: roboto_icons_42
        text: "\U000F01D8 Processing ..."
        text_color: white
  on_tts_start:
    - script.execute: activate_stop_word_once
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 20
        duration: 0.0s

#########  Dinki
# This is  where the response happens.  I'm showing the variable being set in previous_notification_text
  on_tts_end:
    - lvgl.label.update:
        id: voice_label
        text:  !lambda return id(previous_notification_text);
        text_color: green
  on_end:
    - micro_wake_word.enable_model: stop
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
                  id: ball_speaker
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1.0s
    - lvgl.page.show: idle_page
    # - light.turn_off: led_ww
    - lvgl.label.update:
        id: voice_label
        text_font: roboto_icons_42
        text: "\U000F0185 How Can I Assist?"
        text_color: white
    - script.execute: stop_wake_word
    - delay: 150ms
    - script.execute: start_wake_word
    - lambda: id(va).set_use_wake_word(false);

  on_client_connected:
    - script.execute: start_wake_word
  on_client_disconnected:
    - script.execute: stop_wake_word
  on_timer_started:
    - script.execute: draw_timer_timeline

  on_error:
    - voice_assistant.stop
    - micro_wake_word.stop
    - lvgl.page.show: idle_page
    - delay: 500ms
    - micro_wake_word.start
  on_timer_cancelled:
    - delay: 1s
    - lvgl.widget.hide: timer_arc
    - lvgl.widget.hide: lbl_time_remaining
  on_timer_updated:
    - lvgl.widget.show: lbl_time_remaining
  on_timer_tick:
    - lambda: |-
        int seconds = timers[0].seconds_left;
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        seconds %= 60;
        id(time_remaining_0).publish_state(str_sprintf("%d:%02d:%02d", hours, minutes, seconds));
    - lambda: id(draw_timer_timeline).execute();
  on_timer_finished:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 30
        duration: 0.0s
    - delay: 100ms
    - micro_wake_word.enable_model: stop
    - switch.turn_on: timer_ringing

script:

######## Dinki  This is what I need to duplicate for sensor display

  - id: show_notification
    then:
     - lvgl.page.show: notification_page
     - delay: 30s
     - lvgl.page.show: idle_page

  - id: show_intent
    then:
     - lvgl.page.show: intent_page  # change to intent_page when available
     - delay: 20s
     - lvgl.page.show: idle_page

  - id: show_weather
    then:
      - logger.log: "Showing weather page"
      - lvgl.page.show: weather_page
      - delay: 20s
      - logger.log: "Switching to idle page"
      - lvgl.page.show: idle_page
      - online_image.release: weather_img


  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;

  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;

  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;

  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: start_wake_word
    then:
      - lambda: id(va).set_use_wake_word(false);
      - micro_wake_word.start:

  - id: stop_wake_word
    then:
      - micro_wake_word.stop:

  - id: time_update
    then:
      - lvgl.label.update:
          id: date_label
          text: !lambda |-
            static const char * const mon_names[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
            static char date_buf[8];
            auto now = id(time_comp).now();
            snprintf(date_buf, sizeof(date_buf), "%s %2d", mon_names[now.month-1], now.day_of_month);
            return date_buf;
      - lvgl.label.update:
          id: day_label
          text: !lambda |-
            static const char * const day_names[] = {"Sun,", "Mon,", "Tue,", "Wed,", "Thu,", "Fri,", "Sat,"};
            return day_names[id(time_comp).now().day_of_week - 1];

      # - lvgl.label.update:
      #     id: display_time_blank
      #     text: !lambda |-
      #       static char time_buf[16];
      #       auto now = id(time_comp).now();
      #       snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
      #       return time_buf;

      # - lvgl.label.update:
      #     id: display_time_blank
      #     text: !lambda |-
      #       static char time_buf[16];
      #       auto now = id(time_comp).now();
      #       if (now.is_valid()) {
      #         strftime(time_buf, sizeof(time_buf), "%I:%M", localtime(&now.timestamp));
      #         return time_buf;
      #       }
      #       return "Invalid Time";
      - lvgl.label.update:
          id: display_time_blank
          text: !lambda |-
            static char time_buf[16];
            auto now = id(time_comp).now();
            if (now.is_valid()) {
              strftime(time_buf, sizeof(time_buf), "%l:%M", localtime(&now.timestamp));
              return time_buf;
            }
            return "Invalid Time";
  - id: activate_stop_word_once
    then:
      - delay: 1s
      # Enable stop wake word
      - if:
          condition:
            switch.is_off: timer_ringing
          then:
            - micro_wake_word.enable_model: stop
            - wait_until:
                not:
                  media_player.is_announcing:
            - if:
                condition:
                  switch.is_off: timer_ringing
                then:
                  - micro_wake_word.disable_model: stop

  - id: screen_dim
    then:
      - delay: 30s
      - lambda: id(led).turn_on().set_brightness(0.3).perform();
  - id: draw_timer_timeline
    then:
      - if:
          condition:
            lambda: |-
              id(check_if_timers_active).execute();
              id(check_if_timers).execute();
              return id(global_is_timer_active);
          then:
            - lvgl.widget.show: timer_arc
            - lvgl.arc.update:
                id: timer_arc
                value: !lambda |-
                  id(fetch_first_active_timer).execute();
                  int percent_timer_left = round( 100 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)));
                  return percent_timer_left;

          else:
            if:
              condition:
                lambda: |-
                  id(check_if_timers_active).execute();
                  id(check_if_timers).execute();
                  return id(global_is_timer);
              then:
                - lvgl.widget.show: timer_arc
                - lvgl.arc.update:
                    id: timer_arc
                    value: !lambda |-
                      id(fetch_first_timer).execute();
                      int percent_timer_left = round( 100 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
                      return percent_timer_left;

              else:
                - lvgl.widget.hide: timer_arc


switch:
  - platform: template
    id: timer_starting
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - lvgl.page.show: voice_page
      - lvgl.widget.show: lbl_time_remaining
      - lvgl.label.update:
          id: lbl_time_remaining
          text_color: green

  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - lambda: id(led).turn_on().set_brightness(1.0).perform();
      - lvgl.page.show: voice_page
      - lvgl.widget.hide: voice_label
      - lvgl.widget.show: timer_finished_lvgl
      - lambda: |-
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

    on_turn_off:
      - lambda: |-
              id(external_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      - lvgl.page.show: idle_page
      - lvgl.widget.show: voice_label
      - lvgl.widget.hide: timer_finished_lvgl
      - lvgl.widget.hide: timer_arc
      - lvgl.label.update:
          id: lbl_time_remaining
          text: " "
      - light.turn_off: led_ww
      - media_player.stop:
          announcement: true
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s
      - micro_wake_word.start
  - platform: gpio
    id: speaker_enable
    pin:
      number: GPIO46
      ignore_strapping_warning: true
    restore_mode: ALWAYS_ON

select:
  - platform: template
    name: "Wake word sensitivity"
    optimistic: true
    initial_option: Slightly sensitive
    restore_value: true
    entity_category: config
    options:
      - Slightly sensitive
      - Moderately sensitive
      - Very sensitive
    on_value:
      # Sets specific wake word probabilities computed for each particular model
      # Note probability cutoffs are set as a quantized uint8 value, each comment has the corresponding floating point cutoff
      # False Accepts per Hour values are tested against all units and channels from the Dinner Party Corpus.
      # These cutoffs apply only to the specific models included in the firmware: okay_nabu@20241226.3, hey_jarvis@v2, hey_mycroft@v2
      lambda: |-
        if (x == "Slightly sensitive") {
          id(okay_nabu).set_probability_cutoff(217);    // 0.85 -> 0.000 FAPH on DipCo (Manifest's default)
          id(hey_jarvis).set_probability_cutoff(247);   // 0.97 -> 0.563 FAPH on DipCo (Manifest's default)
          id(hey_mycroft).set_probability_cutoff(253);  // 0.99 -> 0.567 FAPH on DipCo
        } else if (x == "Moderately sensitive") {
          id(okay_nabu).set_probability_cutoff(176);    // 0.69 -> 0.376 FAPH on DipCo
          id(hey_jarvis).set_probability_cutoff(235);   // 0.92 -> 0.939 FAPH on DipCo
          id(hey_mycroft).set_probability_cutoff(242);  // 0.95 -> 1.502 FAPH on DipCo (Manifest's default)
        } else if (x == "Very sensitive") {
          id(okay_nabu).set_probability_cutoff(143);    // 0.56 -> 0.751 FAPH on DipCo
          id(hey_jarvis).set_probability_cutoff(212);   // 0.83 -> 1.502 FAPH on DipCo
          id(hey_mycroft).set_probability_cutoff(237);  // 0.93 -> 1.878 FAPH on DipCo
        }


globals:
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false
  - id: current_page
    type: std::string
    restore_value: true
  - id: previous_notification_text
    type: std::string
    initial_value: ""

font:
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_28
    size: 28
    glyphs: &icon_glyphs
      # - "\U000F0C68"#smile
      # - "\U000F0C78"#smile_wink
      # - "\U000F0C69"#smile_angry
      # - "\U000F0C72"#smile_kiss
      # - "\U000F01F7"#smile_poop
      # - "\U000F01F9"#smile_tongue
      # - "\U000F0513"#thumb
      # - "\U000F0079"#battery 100%
      # - "\U000F007A"#battery 10%
      # - "\U000F007B"#battery 20%
      # - "\U000F007C"#battery 30%
      # - "\U000F007D"#battery 40%
      # - "\U000F007E"#battery 50%
      # - "\U000F007F"#battery 60%
      # - "\U000F0080"#battery 70%
      # - "\U000F0081"#battery 80%
      # - "\U000F0082"#battery 90%
      # - "\U000F1835"#battery sync
      - "\U000F009E"#bell
      - "\U000F0150"#clock
      # - "\U000F01AE"#gbp pound symbol
      - "\U000F0210"#fan
      - "\U000F0238"#heating
      - "\U000F024A"#garden/flower
      - "\U000F0335"#light bulb off
      - "\U000F036C"#microphone on
      - "\U000F036D"#microphone off
      - "\U000F036F"#voice settings
      - "\U000F03E4"#pause
      - "\U000F040A"#play
      - "\U000F040E"#play/pause
      - "\U000F0493"#settings cog
      - "\U000F04AD"#next track
      - "\U000F04AE"#previous track
      - "\U000F04B9"#living room
      - "\U000F04C8"#spots
      - "\U000F04DB"#stop
      - "\U000F0502"#screen settings
      - "\U000F050F"#temp sensor
      - "\U000F0521"#toggle on
      - "\U000F0565"#arming
      - "\U000F057E"#speaker on
      - "\U000F0581"#speaker off
      - "\U000F05CB"#voice
      - "\U000F068A"#alarm home
      - "\U000F06E8"#light bulb illuminated
      - "\U000F075A"#music
      - "\U000F075D"#vol plus
      - "\U000F075E"#vol minus
      - "\U000F0769"#ceiling
      - "\U000F07D0"#api connected
      - "\U000F07F4"#tv
      - "\U000F0873"#car miles non
      - "\U000F0874"#car miles full
      - "\U000F0875"#car miles low
      - "\U000F087B"#api disconnected
      - "\U000F08D6"#settings
      - "\U000F099D"#alarm away
      - "\U000F099E"#disarmed
      - "\U000F0A19"#toggle off
      - "\U000F0B26"#down
      - "\U000F0B28"#left
      - "\U000F0B2A"#right
      - "\U000F0B2C"#up
      - "\U000F0B6C"#car battery
      - "\U000F0D90"#screen off
      - "\U000F0EBA"#stats
      - "\U000F0ED4"#voice off
      - "\U000F0FCE"#scene
      - "\U000F1061"#dining
      - "\U000F10CD"#battery warning
      - "\U000F1160"#kitchen
      - "\U000F12A8"#touch button
      - "\U000F12D3"#garage closed
      - "\U000F12D4"#garage open
      - "\U000F1322"#tools
      - "\U000F16BC"#wifidisconnected
      - "\U000F16BD"#wifi connected
      - "\U000F1722"#fire off
      - "\U000F1747"#tall lamp
      - "\U000F1828"#armed night
      - "\U000F192D"#electricity
      - "\U000F1987"#floods
      - "\U000F1A12"#home button
      - "\U000F1A1B"#gas
      - "\U000F1C3B"#battery charging/usb powered
      - "\U000F1C6F"#info
      - "\U000F0185"#comment-processing-outline


  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_180
    size: 210
    glyphs: *icon_glyphs

  - file:
      type: gfonts
      family: Roboto
    id: roboto_small
    size: 25

  - file:
      type: gfonts
      family: Roboto
    id: roboto_big
    size: 75

  - file:
      type: gfonts
      family: Roboto
    id: roboto_icons_42
    size: 24
    bpp: 4
    extras:
      - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
        glyphs: &mdi_icon_glyphs
          - "\U000F0185" # comment-processing-outline
          - "\U000F01D8" # dots-horizontal
          - "\U000F0335" # lightbulb
          - "\U000F0210" # fan
  - file:
      type: gfonts
      family: Roboto
    id: roboto_icons_150
    size: 150
    bpp: 4
    extras:
      - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
        glyphs: *mdi_icon_glyphs  # Reuse the same glyphs list


text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip_addr
      entity_category: "diagnostic"
    ssid:
      id: connected_ssid
      name: SSID
      entity_category: "diagnostic"
    bssid:
      id: connected_bssid
      name: BSSID
      entity_category: "diagnostic"
    mac_address:
      id: device_mac
  - platform: template
    id: up_sens_text
    name: Device uptime
    entity_category: "diagnostic"
    icon: mdi:clock


  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

  - platform: template
    id: time_remaining_0
    name: Timer
    icon: mdi:clock
    on_value:
      - lvgl.label.update:
          id: lbl_time_remaining
          text: !lambda |-
              char buf[10];
              sprintf(buf, "%s", id(time_remaining_0).state.c_str());
              return buf;
      - if:
          condition:
            not:
                - lambda: return (id(time_remaining_0).state <= "0:00:31");
          then:
            - lvgl.label.update:
                id: lbl_time_remaining
                text_color: green
            - lvgl.arc.update:
                id: timer_arc
                arc_color: green
          else:
            - lvgl.label.update:
                id: lbl_time_remaining
                text_color: red
            - lvgl.arc.update:
                id: timer_arc
                arc_color: red

color:
  - id: digi_shadow
    hex: "055370"
  - id: digi_shadow_light
    hex: "0f95c7"
spi:
  - id: spi_bus
    clk_pin: 4
    mosi_pin: 2
display:
  - platform: ili9xxx
    id: ball_lcd
    model: GC9A01A
    invert_colors: true
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 47
    reset_pin:
      number: 38
    update_interval: never
    dimensions:
        height: 240
        width: 240
lvgl:
  id: ball_lvgl
  displays:
    - ball_lcd
  touchscreens:
    - screen_touch
  theme:
    label:
      text_font: roboto_big
      text_align: CENTER
      text_color: digi_shadow_light
      align: CENTER

  style_definitions:
    - id: main_content
      bg_color: 0x0F4A86
      text_color: digi_shadow_light
      width: 100%
      height: 100%
      align: CENTER
      border_width: 0
      scrollbar_mode: "OFF"

  pages:
    - id: idle_page
      widgets:
        - obj:
            id: digital_clock
            styles: main_content
            scrollbar_mode: "OFF"
            scrollable: false
            widgets:
              - label:
                  id: display_time_blank
                  text_font: roboto_big
                  text_align: CENTER
                  text: "00:00"
                  text_color: white
                  bg_opa: TRANSP
              - label:
                  id: day_label
                  y: 50
                  translate_x: -40
                  text_color: white
                  text_font: roboto_small
                  text: "Loading"
              - label:
                  id: date_label
                  y: 50
                  translate_x: 30
                  text_color: white
                  text_font: roboto_small
                  text: "Loading"
              - label:
                  id: lbl_battery_status
                  align: TOP_MID
                  text_color: digi_shadow_light
                  text_font: icon_font_28
                  text: "\U000F1835"
                  hidden: true
              - arc:
                  width: 240
                  height: 240
                  align: CENTER
                  id: timer_arc
                  arc_width: 10
                  bg_opa: TRANSP
                  arc_color: green
                  start_angle: 0
                  end_angle: 360
                  value: 100
                  min_value: 0
                  max_value: 100
                  adjustable: false
                  rotation: 90
                  hidden: true
              - label:
                  id: lbl_time_remaining
                  text_font: montserrat_28
                  y: -70
                  text: " "
                  text_color: green
                  bg_opa: TRANSP
    - id: notification_page
      widgets:
        - obj:
            styles: main_content
            scrollbar_mode: "OFF"
            scrollable: false
            widgets:
              - label:
                  width: 170
                  height: 180
                  id: lbl_note
                  text_font: montserrat_22
                  text_align: CENTER
                  text: " "
                  long_mode: DOT
                  text_color: digi_shadow_light
                  bg_opa: TRANSP
                  on_click:
                    - lvgl.page.show: idle_page

    - id: intent_page
      widgets:
        - obj:
            styles: main_content
            scrollbar_mode: "OFF"
            scrollable: false
            widgets:
              - label:
                  width: 170
                  height: 180
                  id: lbl_intent_icon
                  # text_font: roboto_icons_42
                  text_font: roboto_icons_150
                  text_align: CENTER
                  text: " "
                  long_mode: DOT
                  text_color: digi_shadow_light
                  bg_opa: TRANSP
                  on_click:
                    - lvgl.page.show: idle_page
              - label:
                  id: intent_label
                  y: 50
                  text_font: roboto_small
                  text: "Living Room Ceiling Fan"
                  text_color: white
                  bg_opa: TRANSP
    - id: weather_page
      widgets:
        - obj:
            styles: main_content
            scrollbar_mode: "OFF"
            scrollable: false
            widgets:
              - image:
                  align: CENTER
                  src: weather_img
                  id: weather_img_lvgl
            on_click:
              lvgl.page.show: idle_page
            # - online_image:
            #     url: "http://192.168.0.25:8123/view_assist/esphome/weather/rainy.png"
            #     format: png
            #     type: RGB
            #     id: weather_image

    - id: voice_page
      widgets:
        - obj:
            styles: main_content
            scrollbar_mode: "OFF"
            scrollable: false
            widgets:
              - label:
                  id: voice_label
                  text_font: roboto_icons_42
                  text_align: CENTER
                  text: "\U000F0185 How can I assist?"
                  text_color: white
                  bg_opa: TRANSP

              - label:
                  id: timer_finished_lvgl
                  text_font: icon_font_180
                  text_align: CENTER
                  text: "\U000F009E"
                  text_color: digi_shadow
                  bg_opa: TRANSP
                  hidden: true
                  on_click:
                    switch.turn_off: timer_ringing
