blueprint:
  name: View Assist - Broadcast
  description: Say broadcast and the message and View Assist will send message to
    all devices not in do not disturb mode (View Assist Broadcast v 1.0.0)<br />Note
    Chime TTS is needed for this automation
  domain: automation
  input:
    command_prompt:
      name: Command Text
      description: The phrase you want to use to trigger the automation
      default: (announce | broadcast | tell everyone) {message}
    group_entity:
      name: Group Entity
      description: The group that holds the list of View Assist satellites(example
        group.viewassist_satellites)
      selector:
        entity:
          filter:
          - domain:
            - group
          multiple: false
      default: group.viewassist_satellites
    view_path:
      name: Dashboard Info view
      description: The View Assist dashboard view to use for displaying text only
        information (example /dashboard-viewassist/info)
      default: /dashboard-viewassist/info
    chime_path:
      name: Chime path
      description: The path to a sound file to use as the attention device before
        the message is spoken
      default: www/viewassist/broadcast.mp3
alias: View Assist - Broadcast
description: Say broadcast and the message and VA will send to all devices not in
  do not disturb mode (v1.0.0)
trigger:
- platform: conversation
  command:
  - !input command_prompt
condition: []
action:
- variables:
    target_satellite_device: "{% for sat in expand('group.viewassist_satellites')
      %}\n  {% if (device_id(sat.attributes.mic_device)  == trigger.device_id) or
      (device_id(sat.attributes.display_device)  == trigger.device_id) %}\n    {{
      sat.entity_id }}\n  {% endif %}\n{% endfor %}"
    target_display_device: '{{ device_id(state_attr(target_satellite_device, ''display_device''))
      }}'
    target_mediaplayer_device: '{{ state_attr(target_satellite_device, ''mediaplayer_device'')
      }}'
    target_satellite_device_type: '{{ state_attr(target_satellite_device, ''type'')
      }}'
    view_path: !input view_path
    group_entity: !input group_entity
    chime_path: !input chime_path
  enabled: true
- set_conversation_response: ''
- repeat:
    sequence:
    - parallel:
      - if:
        - condition: template
          value_template: '{{ (''view'' in state_attr(repeat.item, ''type'')) and
            state_attr(repeat.item, ''mode'') != ''hold'' }}'
        then:
        - service: python_script.set_state
          data:
            title: Announcement
            entity_id: '{{ repeat.item }}'
            message_font_size: 4vw
            message: '{{trigger.slots.message | capitalize}}'
        - service: browser_mod.navigate
          metadata: {}
          data:
            path: '{{ view_path }}'
          target:
            device_id: '{{ device_id(state_attr(repeat.item, ''display_device''))
              }}'
    for_each: '{{ state_attr(group_entity, ''entity_id'')| list }}'
- service: chime_tts.say
  target:
    entity_id: "{%- set ns = namespace(targets=[]) -%} {%- for satellite in expand(group_entity)
      -%}\n  {%- if state_attr(satellite.entity_id,\"do_not_disturb\") == \"False\"
      -%}\n    {%- set ns.targets = ns.targets + [state_attr(satellite.entity_id,\"mediaplayer_device\")]
      -%}\n  {%- endif -%}\n{%- endfor -%} {{ns.targets}}"
  data:
    chime_path: '{{ chime_path }}'
    tts_playback_speed: 100
    volume_level: 1
    message: '{{ trigger.slots.message }}'
    tts_platform: google_translate
  enabled: true
mode: single
